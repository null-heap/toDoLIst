:root {
  --base-clr: #f5f3e0;
  --head-clr: #ece7c1;
  --sideBar-clr: #ece7c1;
  --line-clr: #fcbf49;
  --hover-clr: #df5353;
  --active-clr: #d93030;
  --text-clr: black;
  --secondary-text-clr: grey;
  --button-clr: #efa9a9;
  --input-back-clr: #faf9f0;
  /* svg vars */
  --svg-calender: url(./resource/calendar-svgrepo-com.svg);
}

body {
  background-color: var(--base-clr);
}

* {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
}

html {
  font-family: "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;
  line-height: 1.5rem;
}

/* focus outline reset for browser consistency */
:focus-visible,
:focus {
  box-shadow: none;
  outline: 3px solid #003049;
  outline-offset: 2px;
}

*:focus:not(:focus-visible) {
  outline: none;
}

header {
  grid-area: 1 / 2 / 2 / 3;
  display: flex;
  gap: 1em;
  justify-content: flex-end;
  > div {
    height: 1.5em;
    width: 1.5em;
  }
}

button,
label,
input,
select {
  display: block;
  font-family: inherit;
  font-size: 100%;
  margin: 0;
  box-sizing: border-box;
  min-height: 30px;
  border-radius: 3px;
}

input,
textarea,
select {
  border: 1px solid grey;
}

button {
  background-color: var(--button-clr);
  cursor: pointer;
}

button:hover {
  background-color: var(--hover-clr);
}
button:active {
  background-color: var(--active-clr);
}

#page {
  display: grid;
  grid-template-columns: auto 1fr;
  grid-template-rows: min-content 1fr;
  min-height: 100vh;
  min-height: 100dvh;

  > * {
    padding: 1em;
    margin: 0;
  }

  .buttonStyle {
    background-color: var(--button-clr);
    padding: 0.5em;
  }
  .buttonStyle:hover {
    background-color: var(--hover-clr);
  }
  .buttonStyle:active {
    background-color: var(--active-clr);
  }
}

#sideBar {
  grid-area: 1 / 1 / 3 / 2;
  background-color: var(--sideBar-clr);
  width: 20ch;
  padding: 1em;
  border-right: 1px solid var(--line-clr);
  max-height: 100vh;
  transition: 1s ease-in-out;
  text-wrap: nowrap;
  overflow: hidden;

  svg {
    flex-shrink: 0;
  }

  button {
    border: none;
    background: none;
    background-color: none;
    text-align: left;
  }

  button:hover {
    background-color: var(--button-clr);
  }
  button:active {
    background-color: var(--active-clr);
  }

  ul > li {
    svg {
      height: 2em;
    }

    display: flex;
    align-items: center;
    span {
      padding-left: 0.5em;
      flex-grow: 1;
    }
  }

  #sideBarTop {
    margin-left: auto;
    max-width: 100%;
    gap: 1em;
    justify-content: flex-end;
    padding: 0;
    margin-bottom: 0.5em;
  }

  > ul {
    list-style: none;
    display: flex;
    flex-direction: column;

    gap: 1.5em;
    max-height: 100%;
  }

  #searchLi{
    
    display: flex;
    flex-direction: column;
    align-items: start;
    gap: 0.5em;
    input{
      width: 100%;
      font-size: smaller;
    }
    >div{
      display: flex;
    }

    .hidden{
      display: none;
    }
  }
}
/* for all the rotatable svg, controlled through js by adding the rotate class to the parent */
.rotateEnable {
  transition: rotate 1s ease;
}

.rotate .rotateEnable {
  rotate: 180deg;
}

#sideBar li:first-child ~ * {
  opacity: 1;
  transition-property: display opacity;
  transition-duration: 1s;
  transition-behavior: allow-discrete;
}

@starting-style {
  #sideBar li:first-child ~ * {
    opacity: 0;
  }
}

dialog {
  display: none;
  opacity: 0;
  transition-property: display opacity;
  transition-duration: 1s;
  transition-behavior: allow-discrete;
}

dialog[open] {
  display: block;
  opacity: 1;
  translate: 0 0;
  margin-top: 6rem;
  /* the transition from close position/ display none because no start value exist when you transition from none */
  @starting-style {
    opacity: 0;
    translate: 0 -25vh;
  }
}

dialog::backdrop {
  opacity: 0;
  transition-property: overlay display opacity;
  transition-duration: 1s;
  transition-behavior: allow-discrete;
  background-image: linear-gradient(#e66465, #9198e5);
}

dialog[open]::backdrop {
  opacity: 0.75;
}

@starting-style {
  dialog[open]::backdrop {
    opacity: 0;
  }
}

#sideBar.close {
  padding: 0.5rem;
  width: 3rem;

  li:first-child ~ * {
    overflow: hidden;
    display: none;
    opacity: 0;
  }
}

#sideBar .dropMenu {
  display: flex;
  flex-direction: column;
  align-items: flex-start;

  min-height: 0%;
  > div {
    gap: 0.5em;
  }
  span {
    font-size: 1.2rem;
    padding: 0;
  }
  div {
    display: flex;
    align-items: center;
  }

  #projectsSubMenu {
    width: 100%;

    min-height: 0%;

    display: grid;
    grid-template-rows: 0fr;
    list-style: none;
    transition: 700ms ease-in-out;
    button {
      min-height: 10px;
      padding: 0 0.4em;
      overflow: hidden;
    }
    > div {
      overflow: hidden;
      display: flex;
      flex-direction: column;
      align-items: flex-start;
      gap: 0.5em;

      li {
        width: 100%;
        border-bottom: 0.7px solid darkblue;
        display: flex;
        padding: 0.3em 0;

        span {
          overflow: hidden;
        }
      }

      .numberCount {
        margin-left: auto;
        flex-grow: 0;
        flex-shrink: 0;
        padding: 0 0.4em;
        border-radius: 15px;
        background-color: var(--active-clr);
      }
    }
    .deleteButton{
      border-radius: 15px;
    }

    #addProjectLi {
      padding: 0.3em 0.2em;
      gap: 0.3em;


      > button {
        font-size: 10px;
        flex-shrink: 0;
      }
      #addProjectInput {
        /* lets flex take care of it... */
        min-width: 0ch;
      }
    }
  }

  #projectsSubMenu.show {
    grid-template-rows: 1fr;

    div {
      /* look better when the menu closes the scroll bar wont appear */
      overflow: auto;
      overflow-x: hidden;
    }
  }
}

#sideBar {
  #addTaskButton {
    width: auto;
  }
}

#sideBarAddTaskDialog,
#editTaskDialog {
  margin: auto;

  border-radius: 15px;

  form {
    background-color: var(--base-clr);
    display: flex;
    flex-flow: row wrap;
    padding: 2em;
    height: 30%;
    gap: 2em;

    .textareaDiv {
      flex: 1 1 auto;
      textarea {
        height: 100%;
        resize: none;
      }
    }
    > div {
      gap: 1em;
      display: flex;
      flex-direction: column;
      justify-content: space-between;

      > div {
        display: flex;
        justify-content: space-between;
      }
    }
    #addTaskFormButtons,
    #editTaskFormButtons {
      justify-content: flex-end;
      gap: 1em;
      button {
        margin-top: auto;
        flex-basis: 30%;
        text-align: center;
        flex-grow: 0;
        height: 3em;
      }
    }

    label {
      padding-right: 1em;
    }
    input,
    select,
    textarea {
      display: block;
      font-family: inherit;
      font-size: 100%;
      margin: 0;
      box-sizing: border-box;
      width: 40ch;
      height: 40px;
      border-radius: 3px;
      padding: 0.3em;
      background-color: var(--input-back-clr);
    }

    div:has(> input[type="checkbox"]) {
      /* to control the check box I created a dummy div element as a parent with the size of input text element  */
      width: 40ch;
      input[type="checkbox"] {
        margin-right: auto;
        max-width: 40px;
        min-width: 15px;
      }
    }

    .radioPriority {
      display: flex;
      width: 40ch;
      justify-content: flex-start;
      gap: 1em;

      input {
        appearance: none;
        border-radius: 50%;
        width: 1.9em;
        height: 1em;

        transition: 0.2s all linear;
      }

      #priority1 {
        border: 4px solid red;
      }

      #priority1:checked {
        border: 10px solid red;
      }

      #priority2 {
        border: 4px solid darkorange;
      }

      #priority2:checked {
        border: 10px solid darkorange;
      }

      #priority3 {
        border: 4px solid darkblue;
      }

      #priority3:checked {
        border: 10px solid darkblue;
      }

      #priority4 {
        border: 4px solid darkgreen;
      }

      #priority4:checked {
        border: 10px solid darkgreen;
      }
    }

    .formClearButton{
        border-radius: 40px;
        max-width: 3em;
        margin-right: 1em;
    }
  }
}

#main {
  grid-area: 2 /2 /3/ 3;
  display: flex;

  flex-wrap: wrap;
  align-content: start;
  /* max-width: 80vw;
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(min-content, 1fr));
  grid-auto-rows: min-content;
  justify-content: start;
  justify-items: start; */
  gap: 1.5em;
}





.toDoItemDiv {
  max-height: fit-content;
  min-width: min-content;
  border: 2px solid var(--line-clr);
  border-radius: 1.5em;
  padding-left: 1em;
  padding-top: 0.5em;
  display: grid;

  grid-template-columns: repeat(3, min-content);
  grid-template-rows: min-content min-content min-content min-content;
  gap: 1em;
  button {
    border: none;
  }
  .rightButton {
    grid-area: 1 / 3 / 5 / 4;
    height: 80%;
    align-self: center;
    margin-top: -0.5em;
    width: 5px;
  }
  .bottomButton {
    grid-area: 4 /1 /5 /4;
    min-height: 5px;
    width: 90%;
    margin-left: -1em;
    justify-self: center;
  }

  .topDiv {
    /* border: 1px solid black; */
    /* margin-top: -0.8em; */
    display: flex;
    max-height: 1.5ch;
    justify-content: space-between;

    grid-row: 1 / 2;
    grid-column: 1 / 3;

    .editButton {
      margin-left: auto;
      margin-right: 1em;
    }
    button {
      min-height: 25px;
      width: 25px;

      border-radius: 20px;
    }

    .editButton::before {
      content: "✎";
    }

    .deleteButton:before {
      content: "␡";

      position: relative;
      top: -0.2em;
    }
  }
  .startDiv {
    grid-area: 2 / 1 / 3 /2;
    span {
      text-wrap: nowrap;
    }
  }

  .rightDiv {
    grid-area: 2/ 2 / 3 / 3;

    .textDiv {
      max-width: 30ch;
      flex-direction: column;
      > span:first-child {
        border-bottom: 0.5px solid grey;
      }
      p {
        word-wrap: break-word;
      }
    }
  }
  .bottomDiv {
    overflow: hidden;
    grid-area: 3 / 1 / 4 / 2;
  }



  /* created the collapse the be able to handle the gap resizing  */
  .startDiv.bottomCollapse {
    grid-area: 2 / 1 / 4 / 2;
  }

  .startDiv.rightCollapse {
    grid-area: 1 / 1 / 3 / 3;
  }

  .startDiv.bottomCollapse.rightCollapse {
    grid-area: 1 / 1 / 4 / 3;
  }

  .textDiv {
    border-bottom: 0.5px solid grey;

    display: flex;
    > span:first-child {
      width: 11ch;
      text-wrap: nowrap;
    }

    input {
      margin-right: auto;
    }
  }

  > div.hide {
    
    display: none;

  }

} 

.toDoItemDiv{
  animation: fadeIn 500ms;
}

.toDoItemDiv.close{
    opacity: 0;
    animation: fadeOut 500ms;
  
}

@keyframes fadeIn {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}

@keyframes fadeOut {
  from {
    opacity: 1;
  }
  to {
    opacity: 0;
  }
}

